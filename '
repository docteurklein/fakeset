use pgx::*;
use fake::{Fake};
use fake::faker::lorem::en::*;
use rand::rngs::StdRng;
use rand::SeedableRng;
use rand::prelude::*;
use rand_pcg::Pcg64;

pg_module_magic!();

pub static FAKESET_SEED: GucSetting<i32> = GucSetting::new(0);

#[pg_extern]
fn lorem() -> String {
    let rng = &mut Pcg64::seed_from_u64(FAKESET_SEED.get());
    //let v: usize = Faker.fake_with_rng(rng);
    Sentence(3..10).fake_with_rng(rng)
}

#[cfg(any(test, feature = "pg_test"))]
mod tests {
    use pgx::*;

    #[pg_test]
    fn test_hello_fakeset() {
        assert_eq!("Hello, fakeset", crate::hello_fakeset());
    }

}

#[cfg(test)]
pub mod pg_test {
    pub fn setup(_options: Vec<&str>) {
        // perform one-off initialization when the pg_test framework starts
    }

    pub fn postgresql_conf_options() -> Vec<&'static str> {
        // return any postgresql.conf settings that are required for your tests
        vec![]
    }
}
